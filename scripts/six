#!/usr/bin/env python2.5
# vim: sw=4 sts=4 et fileencoding=utf8 nomod

'''Run the doctests in all of the listed modules.  If a module search path is
given with the --path option, then only that path is searched for the modules
listed on the command line.  If the --recursive option is given, then any
packages listed on the command line are tested, and also all modules and
packages contained within them.
'''

import sys
import collections.abc
sys.path.pop(0)
import locale
import os
import os.path
import pickle as pickle
import errno
from optparse import OptionParser
import sixx.parse as parse
from sixx.test import run_doctest
from sixx.input import InputError
from sixx.model import Model, ModelParser
from sixx.expr import parse_predicate, ExprError
from sixx.reports.dump import report_dump, report_dump_getopt
#from sixx.reports.book import report_book, report_book_getopt
from sixx.reports.email import report_email, report_email_getopt
from sixx.reports.phone import report_phone, report_phone_getopt

def main():
    locale.setlocale(locale.LC_ALL, '')
    lang, enc = locale.getlocale()
    # Form list of reports from the available global functions whose names
    # start with "report_".
    reports = dict([(name[7:], (obj, globals().get(name + '_getopt')))
                            for name, obj in globals().items()
                            if isinstance(obj, collections.abc.Callable) and name.startswith('report_')])
    # Must be at least one report defined.
    assert reports
    op = OptionParser(usage=
        'Usage: %prog --doctest [doctest-options] [module ...]\n'
        '       %prog [-r|--report=REPORT] [report-options] [expr]')
    op.add_option('--doctest', action='callback', callback=opt_doctest,
                  help='run doctests (see --doctest --help for options)')
    op.add_option('-l', '--local',
                  action='store', type='string', dest='local',
                  help='output addresses and telephone numbers relative to '
                       'the country or area named LOCAL')
    op.add_option('-o', '--output',
                  action='store', type='string', dest='output_path',
                  help='write output to file pathname instead of stdout')
    op.add_option('-f', '--force',
                  action='store_true', dest='force', default=False,
                  help='force re-compilation')
    op.disable_interspersed_args()
    try:
        # Parse the first argument(s) as the report type option.  If absent,
        # select the default report.
        args = sys.argv[1:]
        if args and args[0].startswith('-r='):
            arg = args.pop(0)
            report = arg[3:]
        elif args and args[0].startswith('--report='):
            arg = args.pop(0)
            report = arg[9:]
        elif args and args[0] in ('-r', '--report'):
            arg = args.pop(0)
            report = args.pop(0) if args else None
        else:
            report = 'dump'
        if not report:
            raise ArgError('missing report name', arg=arg)
        try:
            report, getopt = reports[report]
        except KeyError:
            raise ArgError('unsupported report', arg=report)
        # Call the report's getopt function, if available, to populate the
        # option parser with the report-specific options.
        if getopt:
            getopt(op)
        # Parse the command-line options.
        options, args = op.parse_args(args)
        # Look for the source data file, and form the cache pathname from its
        # path.
        try:
            srcpath = os.environ['SIX_SOURCE']
        except LookupError as e:
            raise EnvError('missing', var='SIX_SOURCE')
        if not os.path.isfile(srcpath):
            raise EnvError('file missing', var='SIX_SOURCE')
        cache = os.path.join(os.path.dirname(srcpath), '.sixx-cache-' + os.path.basename(srcpath))
        # If the cache exists, attempt to read the model from it.  In the event
        # that it fails to read correctly, silently skip it and proceed to
        # compile the model from source, then save the compiled model in the
        # cache.
        model = None
        if (    not options.force
            and os.path.exists(cache)
            and (os.stat(srcpath).st_mtime <= os.stat(cache).st_mtime)
        ):
            try:
                with open(cache, 'rb') as f:
                    #print('loading %r ...' % cache, file=sys.stderr)
                    model = pickle.load(f)
                    #print('loaded', file=sys.stderr)
            except Exception:
                sys.excepthook(*sys.exc_info())
                pass
        if model is None:
            model = Model()
            parser = ModelParser(model)
            try:
                for block in parse.blocks(parse.remove_comments(parse.lines(srcpath))):
                    parser.parse_block(block)
                parser.finish_parsing()
            except IOError as e:
                raise InputError('error parsing source file: %s' % (e,),
                                 path=srcpath)
            finally:
                parser.finalise()
            try:
                os.remove(cache)
            except OSError as e:
                if e.errno != errno.ENOENT:
                    raise
            orl = sys.getrecursionlimit()
            sys.setrecursionlimit(4000)
            with open(cache, 'wb') as f:
                #print('dumping %r ...' % cache, file=sys.stderr)
                pickle.dump(model, f, pickle.HIGHEST_PROTOCOL)
                #print('dumped', file=sys.stderr)
            sys.setrecursionlimit(orl)
        # Determine the local location for relative rewriting of addresses and
        # telephone numbers.  If not given as a command-line option, then look
        # in an environment variable.
        local = None
        localn = None
        if options.local:
            try:
                local = model.lookup_place(options.local)
            except LookupError as e:
                raise ArgError(e, arg=options.local)
        elif 'SIX_LOCAL' in os.environ:
            try:
                local = model.lookup_place(os.environ['SIX_LOCAL'])
            except LookupError as e:
                raise EnvError('missing', var='SIX_LOCAL')
        # Parse command-line args as search expression.  If no args, then
        # select all nodes.
        if args:
            try:
                pred = parse_predicate(model, args)
            except ExprError as e:
                raise ArgError(e)
        else:
            pred = None
        # Print the selected report.
        report(options, model, pred, local)
    except (IOError, InvocationError, InputError) as e:
        print('%s: %s' % (os.path.basename(sys.argv[0]), str(e)), file=sys.stderr)
        sys.exit(1)

def opt_doctest(option, opt_str, value, parser):
    op = OptionParser(usage=r'Usage: %prog --doctest [options] [module ...]')
    op.add_option('-v', '--verbose', action='store_true', dest='verbose',
                  help='print all tests and results as they are run')
    op.add_option('-r', '--recursive', action='store_true', dest='recursive',
                  help='recurse through packages')
    op.add_option('-p', '--path', action='store', type='string', dest='path',
                  help='search for modules in directory PATH')
    options, args = op.parse_args(args=parser.rargs)
    modules = args
    if not modules:
        modules = ['sixx']
        options.recursive = True
    status = 0
    for module_name in modules:
        if not run_doctest(module_name, options.path, recurse=options.recursive,
                           verbose=options.verbose):
            status = 1
    sys.exit(status)

class InvocationError(Exception):
    pass

class ArgError(InvocationError):

    def __init__(self, msg, arg=None):
        InvocationError.__init__(self, msg)
        self.arg = arg

    def __str__(self):
        r = []
        if self.arg is not None:
            r.append(repr(self.arg))
        r.append(InvocationError.__str__(self))
        return ': '.join(r)

class EnvError(InvocationError):

    def __init__(self, msg, var=None):
        InvocationError.__init__(self, msg)
        self.var = var

    def __str__(self):
        r = []
        if self.var is not None:
            r.append('env var %s' % self.var)
            try:
                r[-1] += '=%r' % os.environ[self.var]
            except KeyError:
                pass
        r.append(InvocationError.__str__(self))
        return ': '.join(r)

if __name__ == '__main__':
    main()
